name: PlanNet32 

on:
  workflow_dispatch:

jobs:
  setup-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create User Mark101
        run: |
          net user PlanNet32 BuanZz@123.. /add
          net localgroup administrators PlanNet32 /add
        shell: cmd

      - name: Enable VPN
        run: |
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f
          netsh advfirewall firewall set rule group="Remote Desktop" new enable=yes
        shell: cmd

      - name: Allow IDK-32
        run: |
          powershell -Command "Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'PlanNet32'"
        shell: pwsh

      - name: Download and Unzip Hk3u
        run: |
          curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip
          tar -xf ngrok.zip
        shell: bash

      - name: Add API PlanNet Boost
        run: .\ngrok.exe authtoken ${{ secrets.TOKEN }}
        shell: cmd

      - name: Start PlanNet32
        run: Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -WindowStyle Hidden
        shell: powershell
      
      - name: Print ngrok logs (for debugging, remove in real use)
        run: type .\.ngrok2\ngrok.log
        shell: cmd

      - name: Download and Set Wallpaper
        shell: pwsh
        run: |
          # Download the image
          $url = "https://www.mediafire.com/file/a8ggmm4c3ldcryf/o9dio8yl+(1).png/file?dkey=rm33jqwaiae&r=531"
          $output = "$env:USERPROFILE\Pictures\wallpaper.png"

          # Use Invoke-WebRequest (more reliable and handles redirects)
          try {
              Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing
          } catch {
              Write-Error "Failed to download image: $($_.Exception.Message)"
              exit 1
          }

          # Set the wallpaper
          Add-Type -TypeDefinition @"
            using System;
            using System.Runtime.InteropServices;
            public class Wallpaper {
              [DllImport("user32.dll", CharSet=CharSet.Auto)]
              public static extern Int32 SystemParametersInfo(UInt32 uiAction, UInt32 uiParam, String pvParam, UInt32 fWinIni);
            }
          "@

          [Wallpaper]::SystemParametersInfo(0x14, 0, $output, 0x2)

      - name: Keep Alive (Crude)
        run: |
          while ($true) {
            Write-Host "Waiting... (Press Ctrl+C to terminate, but this will kill the runner)"
            Start-Sleep -Seconds 60
          }
        shell: powershell
